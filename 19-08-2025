                                                                                          POINTERs

1. Swap two numbers using pointers.

2. Sum of array elements using pointers.

3. Reverse an array using pointers.

4. Find the largest element in an array.

5. Copy one string to another using pointers.

6. Dynmaic memory allocation for 2D Matrix.

7. Simulate array of function pointers.

8. Pointers to structure and dynamic allocation.

Code solutions:

1. #include<stdio.h>

void swap(int *a, int *b)
{
    int temp = *a; //Put the value of a in temp
    *a = *b; //Put the value of b in a
    *b = temp; // Put the value of temp in b
}
int main()
{
    int x,y;
    printf("Enter the value of x and y:");
    scanf("%d%d", &x,&y);
    printf("Before swapping: x = %d,y = %d\n", x,y);
    swap(&x,&y);
    printf("After swaping: x = %d, y = %d\n",x,y);
    return 0;
    
}

2. 

CODE

Problem 1: Custom Memory Allocator using Pointers: Implement a simplified custom memory allocator in C that manages a fixed size of memory buffer(e.g., 1KB). You need to
implement two functions:
void*my_malloc(size_t size);
void my_free(void* ptr);

The my malloc function should allocate memory chunks from a global buffer.
The my free function should mark a previously allocated chunk as free.
Use pointer arithmetic to track allocations, and maintain a simple meta data structure(e.g., linked list of blocks or bit flags) to manage used and free memory blocks.

Problem 2: Implement Linked List(Create, Insert, Delete, Display): Use pointers to implement a singly linked list and perform operations like insert at beginning/end,
delete a node, and display the list.

